#include "high.ceu"

native/pre do
GstElement *src;
GstElement *audiorate;
GstElement *audiosink;
GstElement *videosink;

##include <gst/audio/gstaudiobasesink.h>
##include <gstsynchronousclock.h>
##define MS_TO_NS 1000000

end

native do 
void
cb_pad_added (GstElement *dec, GstPad *pad, gpointer _)
{
  GstCaps *caps;
  GstStructure *str;
  GstPad *sinkpad;
  const gchar *name;
  GstElementClass *klass;

  /* check media type */
  caps = gst_pad_query_caps (pad, NULL);
  str = gst_caps_get_structure (caps, 0);
  name = gst_structure_get_name (str);

  if (g_str_has_prefix (name, "audio")) 
    sinkpad = gst_element_get_static_pad (audiorate, "sink");
  else if (g_str_has_prefix (name, "video"))
    sinkpad = gst_element_get_static_pad (videosink, "sink");
  else 
    sinkpad = NULL;

  if (sinkpad) 
  {
    if (!gst_pad_is_linked (sinkpad))
      gst_pad_link (pad, sinkpad);

    gst_object_unref (sinkpad);
  }
}
end

native @nohold _gst_synchronous_clock_advance_time ();
native @nohold _gst_pipeline_use_clock ();

var int argc;
var char && &&argv;
(argc, argv) = await OS_START;

if argc < 2 then
  _printf ("Usage: %s <uri>\n", _ELEM_N (argv, 0));
  escape 0;
end

_gst_init (&&argc, &&argv); 

finalize
  _pipeline = _gst_pipeline_new ("pipeline");
with
  _gst_object_unref (_pipeline);
end

finalize
  _src = _gst_element_factory_make ("uridecodebin", "decoder");
with
end

finalize
  _videosink = _gst_element_factory_make ("xvimagesink", "videosink");
with
end

finalize
  _audiorate = _gst_element_factory_make ("audiorate", "audiorate");
with
end

finalize
  _audiosink = _gst_element_factory_make ("alsasink", "audiosink");
with
end

_assert (_pipeline);
_assert (_src);
_assert (_videosink);
_assert (_audiorate);
_assert (_audiosink);

finalize
  _bus = _gst_pipeline_get_bus (_GST_PIPELINE(_pipeline));
with
  _gst_object_unref(_bus);
end

_gst_bin_add_many (_GST_BIN (_pipeline), _src, _videosink, _audiorate, _audiosink, null); 

if not _gst_element_link (_audiorate, _audiosink) then
  _printf ("Could not link '%s' with '%s'\n", _GST_OBJECT_NAME (_audiorate),
                                              _GST_OBJECT_NAME (_audiosink));
  escape 0;
end

_g_signal_connect (_G_OBJECT (_src), "pad-added", _G_CALLBACK (_cb_pad_added), null);
_g_object_set (_G_OBJECT(_src), "uri", _ELEM_N (argv,1), null);

var u64 tick = 30;
var u64 clockrate = 1;

var _GstClock&? syncclock;
finalize
  syncclock = &_gst_synchronous_clock_new ();
with
  _g_object_unref (&&syncclock!);
end

_GST_OBJECT_FLAG_SET (_G_OBJECT(_audiosink), _GST_CLOCK_FLAG_CAN_SET_MASTER);
var _GstClock&& audioclock = _GST_AUDIO_BASE_SINK (_audiosink):provided_clock;
_gst_clock_set_timeout (audioclock, tick/2 * _MS_TO_NS);

if not _gst_clock_set_master (audioclock, &&syncclock!) then
  _printf ("Could not slave audioclock (%p) to clock (%p)\n", 
      (void &&) audioclock, (void &&) &&syncclock!);
end

_gst_element_set_state (_pipeline, _GST_STATE_PLAYING);
finalize with
  _gst_element_set_state (_pipeline, _GST_STATE_NULL);
end

_gst_pipeline_use_clock (_GST_PIPELINE(_pipeline), &&syncclock!);

watching GST_MESSAGE_ERROR do
  watching GST_MESSAGE_EOS do
    every (tick)ms do
      _gst_synchronous_clock_advance_time (&&syncclock!, clockrate * tick * _MS_TO_NS);
    end
  end
end

escape 0;
